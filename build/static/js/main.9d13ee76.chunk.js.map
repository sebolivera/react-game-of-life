{"version":3,"sources":["Utils.js","Game.js","App.js","index.js"],"names":["getRandomInt","max","Math","floor","random","random_box_muller","u","v","num","sqrt","log","cos","PI","getRandomBMInt","neighbors","x","y","board","height","length","width","neighborsTotal","i","min","j","Handle","Slider","theme","createTheme","palette","primary","main","grey","secondary","blue","danger","red","warning","green","Game","props","state","context","paused","btnText","notRestarted","gameSpeed","gridLines","darkMode","tileSize","arrowPoint","menuShowText","printLog","arg","console","goLive","timeoutID","setTimeout","live","ticks","draw","beginPath","fillStyle","strokeStyle","fillRect","lineWidth","strokeRect","setState","oldBoard","oldRow","slice","row","push","update","getCell","pause","seedClusters","listSeeds","newBoard","forEach","e","clusterSize","maxClusterSize","pIndex","currentCell","targetCell","density","distance","pow","abs","proximityIndex","clusterDensity","toString","initBoard","setSpeed","clearTimeout","updateSpeed","sliderRanges","updateGridLines","updateMode","document","body","style","backgroundColor","handleCollapse","menuTextVal","nval","menuCollapse","updateTileSize","target","value","canvas","createRef","divElement","clusterStarterPercentage","this","liveCells","rect","ReactDOM","findDOMNode","getBoundingClientRect","pageX","left","pageY","top","undefined","$set","updateWindowDimensions","bind","clientWidth","clientHeight","current","getContext","dragging","index","restProps","prefixCls","overlay","visible","placement","ThemeProvider","className","ref","onClick","cancel","Box","sx","bgcolor","p","htmlFor","IconButton","color","component","transform","Collapse","in","Grid","container","spacing","display","justifyContent","py","Button","variant","onMouseDown","minWidth","seedBoard","xs","TextField","type","InputProps","inputProps","label","input","borderRadius","onChange","maxWidth","FormControlLabel","control","Checkbox","defaultChecked","item","id","marks","defaultValue","step","handle","Component","App","render","getElementById"],"mappings":"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","file":"static/js/main.9d13ee76.chunk.js","sourcesContent":["export function sigmoid(z, k = 2) {\n  return 1 / (1 + Math.exp(-z / k));\n}\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport function random_box_muller() {\n  //shamelessly stolen from stackoverflow\n  let u = 0,\n    v = 0;\n  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n  while (v === 0) v = Math.random();\n  let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n  num = num / 10.0 + 0.5; // Translate to 0 -> 1\n  if (num > 1 || num < 0) return random_box_muller(); // resample between 0 and 1\n  return num;\n}\n\nexport function getRandomBMInt(max) {\n  //returns a given int from 0 to max, but with a normal distribution centered around max/2\n  return Math.floor(random_box_muller() * max);\n}\n\nexport function proximityIndex(\n  currentCell,\n  targetCell,\n  clusterSize,\n  density = 1\n) {\n  //checks that the currently read cell is within a clusterSize distance of a given cell, and returns a probability (0 to 1) of that cell being filled\n  let distance = Math.sqrt(\n    Math.pow(currentCell[0] - targetCell[0], 2) +\n      Math.pow(currentCell[1] - targetCell[1], 2)\n  );\n  return Math.max(\n    0,\n    (Math.abs(1 - density) + clusterSize - distance) / distance\n  ); //actually less legible than I'd like :/\n}\n\nexport function neighbors(x, y, board) {\n  let height = board.length - 1;\n  let width = board[0].length - 1;\n  let neighborsTotal = 0;\n  for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, height); i++) {\n    for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, width); j++) {\n      if ((i !== x || j !== y) && board[i][j] === 1) {\n        neighborsTotal++;\n      }\n    }\n  }\n  return neighborsTotal;\n}\n","import React, { createRef, Component } from \"react\";\nimport {\n    getRandomInt,\n    getRandomBMInt,\n    proximityIndex,\n    neighbors,\n} from \"./Utils.js\";\nimport \"./Game.css\";\nimport ReactDOM from \"react-dom\";\nimport update from \"react-addons-update\";\nimport Slider, { SliderTooltip } from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\nimport {\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    TextField,\n    Collapse,\n    IconButton,\n    ThemeProvider,\n    Box,\n    Button,\n} from \"@mui/material/\";\nimport { createTheme } from \"@mui/material/styles\";\nimport { grey, blue, red, green } from \"@mui/material/colors\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport Draggable from \"react-draggable\";\n\nconst { Handle } = Slider;\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: grey[500],\n        },\n        secondary: {\n            main: blue[500],\n        },\n        danger: {\n            main: red[500],\n        },\n        warning: {\n            main: green[500],\n        },\n    },\n});\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.canvas = createRef();\n        this.divElement = createRef();\n        this.clusterStarterPercentage = 0.1;\n        this.maxClusterSize = 10;\n        this.clusterDensity = 1;\n        this.timeoutID = null;\n        this.sliderRanges = {\n            0: 0.001,\n            1: 0.01,\n            2: 0.1,\n            3: 1,\n            4: 2,\n            5: 5,\n            6: 10,\n            7: 25,\n            8: 50,\n            9: 100,\n        };\n        this.ticks = 1000;\n    }\n    state = {\n        board: [],\n        width: 0,\n        height: 0,\n        context: null,\n        paused: true,\n        btnText: \"Play\",\n        notRestarted: true,\n        gameSpeed: 1,\n        gridLines: true,\n        darkMode: true,\n        tileSize: 10,\n        arrowPoint: 180,\n        menuShowText: \"Show\",\n    };\n\n    printLog = (\n        arg //literally just a console.log callback, don't remember why I made that\n    ) => {\n        console.log(\"arg:\", arg);\n    };\n\n    goLive = () => {\n        this.timeoutID = setTimeout(() => this.live(), this.ticks);\n    };\n\n    draw = () => {\n        let board = this.state.board;\n        let context = this.state.context;\n        let gridLines = this.state.gridLines;\n        context.beginPath();\n        if (this.state.darkMode) {\n            context.fillStyle = \"black\";\n            context.strokeStyle = \"white\";\n        } else {\n            context.fillStyle = \"white\";\n            context.strokeStyle = \"black\";\n        }\n        context.fillRect(0, 0, this.state.width, this.state.height);\n        context.lineWidth = 0.1;\n        if (this.state.darkMode) {\n            context.fillStyle = \"lightblue\";\n        } else {\n            context.fillStyle = \"red\";\n        }\n        let height = board.length;\n        let width = board[0].length;\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (board[i][j] === 1) {\n                    context.fillRect(\n                        j * this.state.tileSize,\n                        i * this.state.tileSize,\n                        this.state.tileSize,\n                        this.state.tileSize\n                    );\n                }\n                if (gridLines) {\n                    context.strokeRect(\n                        j * this.state.tileSize,\n                        i * this.state.tileSize,\n                        this.state.tileSize,\n                        this.state.tileSize\n                    );\n                }\n            }\n        }\n        this.setState({ context: context });\n    };\n\n    live = () => {\n        if (!this.state.paused) {\n            let height = this.state.board.length;\n            let width = this.state.board[0].length;\n            let oldBoard = []; // .slice() and [...this.state.board] don't seem to be working for two-dimensional arrays, so I had to resort to this : ...\n            let board = [];\n            for (let i = 0; i < this.state.board.length; i++) {\n                let oldRow = this.state.board[i].slice();\n                let row = this.state.board[i].slice();\n                oldBoard.push(oldRow);\n                board.push(row);\n            }\n            for (let i = 0; i < height; i++) {\n                for (let j = 0; j < width; j++) {\n                    let n = neighbors(i, j, oldBoard);\n                    switch (n) {\n                        case 2:\n                            break;\n                        case 3:\n                            board[i][j] = 1;\n                            break;\n                        default:\n                            board[i][j] = 0;\n                    }\n                }\n            }\n            this.setState({ board: board }, this.draw);\n            this.goLive();\n        }\n    };\n\n    update = () => {\n        if (this.state.notRestarted) {\n            this.draw();\n            this.goLive();\n        }\n    };\n\n    getCell = (i, j) => {\n        let x = Math.max(\n            0,\n            Math.min(\n                this.state.board.length - 1,\n                Math.floor(j / this.state.tileSize)\n            )\n        );\n        let y = Math.max(\n            0,\n            Math.min(\n                this.state.board[0].length - 1,\n                Math.floor(i / this.state.tileSize)\n            )\n        );\n        return [x, y];\n    };\n\n    pause = () => {\n        if (this.state.paused) {\n            this.setState({ btnText: \"Pause\" });\n            this.setState({ paused: false }, this.update);\n        } else {\n            this.setState({ btnText: \"Play\" });\n            this.setState({ paused: true });\n        }\n    };\n\n    seedClusters = (board, listSeeds) => {\n        let newBoard = [...board];\n        for (let i = 0; i < newBoard.length; i++) {\n            for (let j = 0; j < newBoard[0].length; j++) {\n                listSeeds.forEach((e) => {\n                    let clusterSize = getRandomBMInt(this.maxClusterSize);\n                    let pIndex = proximityIndex(\n                        e,\n                        [i, j],\n                        clusterSize,\n                        this.clusterDensity\n                    );\n                    if (pIndex > 0) {\n                        let r = Math.random();\n                        if (r <= pIndex || e.toString() === [i, j]) {\n                            //random will give a float < 1, same thing for pIndex\n                            newBoard[i][j] = 1;\n                        }\n                    }\n                    board[e[0]][e[1]] = 1;\n                });\n            }\n        }\n        return newBoard;\n    };\n\n    seedBoard() {\n        let board = [...this.state.board];\n        let height = board.length;\n        let width = board[0].length;\n        let liveCells =\n            (this.clusterStarterPercentage / 100) * (width * height);\n        let listSeeds = [];\n        while (liveCells > 0) {\n            let x = getRandomInt(height);\n            let y = getRandomInt(width);\n            if (board[x][y] !== 1) {\n                board[x][y] = 1;\n                listSeeds.push([x, y]);\n                liveCells--;\n            }\n        }\n        board = this.seedClusters(board, listSeeds);\n\n        this.setState({ board: board }, this.draw);\n    }\n\n    initBoard = () => {\n        let board = [];\n        let height = Math.floor(this.state.height / this.state.tileSize);\n        let width = Math.floor(this.state.width / this.state.tileSize);\n\n        for (let i = 0; i < height; i++) {\n            let row = [];\n            for (let j = 0; j < width; j++) {\n                row.push(0);\n            }\n            board.push([...row]);\n        }\n        this.setState({ board: board }, this.update);\n    };\n\n    onClick(e) {\n        var rect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n        let i = e.pageX - rect.left;\n        let j = e.pageY - rect.top;\n        const [x, y] = this.getCell(i, j);\n        if (\n            this.state.board !== undefined &&\n            x < this.state.board.length &&\n            y < this.state.board[0].length\n        ) {\n            //somehow a click event will randomly be detected outside of bounds\n            if (this.state.board[x][y] === 1) {\n                this.setState(\n                    {\n                        board: update(this.state.board, {\n                            [x]: { [y]: { $set: 0 } },\n                        }),\n                    },\n                    this.draw\n                );\n            } else {\n                this.setState(\n                    {\n                        board: update(this.state.board, {\n                            [x]: { [y]: { $set: 1 } },\n                        }),\n                    },\n                    this.draw\n                );\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        //window.addEventListener('resize', this.updateWindowDimensions); //not sure I actually want this\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentWillUnmount() {\n        //window.removeEventListener('resize', this.updateWindowDimensions); //remove if the listener wasn't added\n        clearTimeout(this.timeoutID);\n    }\n\n    updateWindowDimensions() {\n        clearTimeout(this.timeoutID);\n        this.setState(\n            {\n                width: this.divElement.clientWidth,\n                height: this.divElement.clientHeight - 4, //not quite sure why this is needed, but stuff seems to be otherwise popping up below\n                context: this.canvas.current.getContext(\"2d\"),\n            },\n            this.initBoard\n        );\n    }\n\n    setSpeed = () => {\n        this.ticks = 1000 / this.state.gameSpeed;\n        clearTimeout(this.timeoutID);\n        this.timeoutID = setTimeout(() => this.live(), this.ticks);\n    };\n\n    updateSpeed = (e) => {\n        this.setState({ gameSpeed: this.sliderRanges[e] }, this.setSpeed);\n    };\n\n    updateGridLines = (e) => {\n        this.setState({ gridLines: !this.state.gridLines }, this.draw);\n    };\n\n    updateMode = (e) => {\n        if (this.state.darkMode) {\n            document.body.style.backgroundColor = \"white\";\n        } else {\n            document.body.style.backgroundColor = \"black\";\n        }\n        this.setState({ darkMode: !this.state.darkMode }, this.draw);\n    };\n\n    handleCollapse = (e) => {\n        let nval = (this.state.arrowPoint + 180) % 360;\n        let menuTextVal;\n        if (this.state.menuShowText === \"Show\") {\n            menuTextVal = \"Hide\";\n        } else {\n            menuTextVal = \"Show\";\n        }\n        this.setState({\n            menuCollapse: !this.state.menuCollapse,\n            arrowPoint: nval,\n            menuShowText: menuTextVal,\n        });\n    };\n\n    handle(props) {\n        const { value, dragging, index, ...restProps } = props;\n        let txtValues = {\n            0: \"Ultra Slow\",\n            1: \"Super Slow\",\n            2: \"Slow\",\n            3: \"Normal\",\n            4: \"Slightly Faster\",\n            5: \"Faster\",\n            6: \"Fast\",\n            7: \"Very Fast\",\n            8: \"Stupid Fast\",\n            9: \"Why\",\n        };\n        return (\n            <SliderTooltip\n                prefixCls=\"rc-slider-tooltip\"\n                overlay={txtValues[value]}\n                visible={dragging}\n                placement=\"top\"\n                key={index}\n            >\n                <Handle value={value} {...restProps} />\n            </SliderTooltip>\n        );\n    }\n    updateTileSize = (e) => {\n        this.setState({ tileSize: e.target.value }, this.initBoard);\n        this.draw();\n    };\n\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <div\n                    className=\"mainContainer\"\n                    ref={(divElement) => {\n                        this.divElement = divElement;\n                    }}\n                >\n                    <div className=\"canvasContainer\">\n                        <canvas\n                            onClick={this.onClick.bind(this)}\n                            ref={this.canvas}\n                            width={this.state.width}\n                            height={this.state.height}\n                        />\n                        <div className=\"menuContainer\">\n                            <div className=\"mainPannel\">\n                                <Draggable cancel=\".rc-slider\">\n                                    {/* cancel permet de spécifier que l'on ne peut pas déplacer le paneau lorsqu'on touche au slider */}\n                                    <Box\n                                        sx={{\n                                            bgcolor: \"text.secondary\",\n                                            p: \"1vw\"\n                                        }}\n                                    >\n                                        <label htmlFor=\"icon-button-toggle\">\n                                            <IconButton\n                                                color=\"primary\"\n                                                aria-label=\"hide show pannel\"\n                                                component=\"span\"\n                                                onClick={this.handleCollapse}\n                                            >\n                                                <KeyboardArrowDownIcon\n                                                    style={{\n                                                        transform: `rotate(${this.state.arrowPoint}deg)`,\n                                                        color: `white`,\n                                                    }}\n                                                />\n                                                <button className=\"aNoStyle white-text\">\n                                                    {this.state.menuShowText}{\" \"}\n                                                    menu\n                                                </button>\n                                            </IconButton>\n                                        </label>\n                                        <Collapse in={this.state.menuCollapse}>\n                                            <Box sx={{ p: \"1vw\" }}>\n                                                {/* cancel permet de spécifier que l'on ne peut pas déplacer le paneau lorsqu'on touche au slider */}\n                                                <div className=\"UIWrapper\">\n                                                    <Grid container spacing={2}>\n                                                        <Box\n                                                            sx={{\n                                                                width: \"100%\",\n                                                                display: \"flex\",\n                                                                justifyContent:\n                                                                    \"space-evenly\",\n                                                                py: \"10px\",\n                                                            }}\n                                                        >\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                color=\"warning\"\n                                                                onMouseDown={\n                                                                    this.pause\n                                                                }\n                                                                sx={{\n                                                                    minWidth:\n                                                                        \"120px\",\n                                                                }}\n                                                            >\n                                                                {\n                                                                    this.state\n                                                                        .btnText\n                                                                }\n                                                            </Button>\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                color=\"secondary\"\n                                                                onMouseDown={this.seedBoard.bind(\n                                                                    this\n                                                                )}\n                                                                sx={{\n                                                                    minWidth:\n                                                                        \"120px\",\n                                                                }}\n                                                            >\n                                                                Clusterize\n                                                            </Button>\n                                                        </Box>\n                                                        <Box\n                                                            sx={{\n                                                                width: \"100%\",\n                                                                display: \"flex\",\n                                                                justifyContent:\n                                                                    \"space-evenly\",\n                                                                py: \"10px\",\n                                                            }}\n                                                        >\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                color=\"danger\"\n                                                                onMouseDown={\n                                                                    this\n                                                                        .initBoard\n                                                                }\n                                                                sx={{\n                                                                    minWidth:\n                                                                        \"120px\",\n                                                                }}\n                                                                xs={6}\n                                                            >\n                                                                Restart\n                                                            </Button>\n                                                            <div className=\"fakeButton\">\n                                                                <TextField\n                                                                    variant=\"outlined\"\n                                                                    type=\"number\"\n                                                                    InputProps={{\n                                                                        inputProps:\n                                                                            {\n                                                                                max: Math.floor(\n                                                                                    this\n                                                                                        .state\n                                                                                        .width /\n                                                                                        10\n                                                                                ),\n                                                                                min: 1,\n                                                                            },\n                                                                    }}\n                                                                    sx={{\n                                                                        label: {\n                                                                            color: \"white\",\n                                                                        },\n                                                                        input: {\n                                                                            color: \"white\",\n                                                                        },\n                                                                        backgroundColor:\n                                                                            \"#d3d3d31c\",\n                                                                        borderRadius:\n                                                                            \"10px\",\n                                                                    }}\n                                                                    value={\n                                                                        this\n                                                                            .state\n                                                                            .tileSize\n                                                                    }\n                                                                    onChange={this.updateTileSize.bind(\n                                                                        this\n                                                                    )}\n                                                                    label=\"Tile Size\"\n                                                                />\n                                                            </div>\n                                                        </Box>\n                                                        <Grid\n                                                            container\n                                                            sx={{\n                                                                width: \"100%\",\n                                                                display: \"flex\",\n                                                                justifyContent:\n                                                                    \"space-evenly\",\n                                                                py: \"10px\",\n                                                            }}\n                                                        >\n                                                            <Box\n                                                                xs={6}\n                                                                sx={{\n                                                                    color: \"white\",\n                                                                    maxWidth:\n                                                                        \"200px\",\n                                                                    borderRadius:\n                                                                        \"10px\",\n                                                                }}\n                                                            >\n                                                                <FormControlLabel\n                                                                    control={\n                                                                        <Checkbox\n                                                                            defaultChecked\n                                                                        />\n                                                                    }\n                                                                    label=\"Show Grid\"\n                                                                    onChange={this.updateGridLines.bind(\n                                                                        this\n                                                                    )}\n                                                                />\n                                                            </Box>\n                                                            <Box\n                                                                xs={6}\n                                                                sx={{\n                                                                    color: \"white\",\n                                                                    maxWidth:\n                                                                        \"200px\",\n                                                                    borderRadius:\n                                                                        \"10px\",\n                                                                }}\n                                                            >\n                                                                <FormControlLabel\n                                                                    control={\n                                                                        <Checkbox\n                                                                            defaultChecked\n                                                                        />\n                                                                    }\n                                                                    label=\"DarkMode\"\n                                                                    onChange={this.updateMode.bind(\n                                                                        this\n                                                                    )}\n                                                                />\n                                                            </Box>\n                                                        </Grid>\n                                                        <Grid\n                                                            container\n                                                            sx={{\n                                                                width: \"100%\",\n                                                                display: \"flex\",\n                                                                justifyContent:\n                                                                    \"space-evenly\",\n                                                                py: \"10px\",\n                                                            }}\n                                                        >\n                                                            <Grid item xs={3}>\n                                                                <label className=\"floatRight\">\n                                                                    Speed\n                                                                </label>\n                                                            </Grid>\n                                                            <Grid item xs={6}>\n                                                                <Slider\n                                                                    id=\"iAmSpeed\"\n                                                                    min={0}\n                                                                    max={9}\n                                                                    marks={\n                                                                        this\n                                                                            .sliderRanges\n                                                                    }\n                                                                    defaultValue={\n                                                                        3\n                                                                    }\n                                                                    step={null}\n                                                                    onChange={this.updateSpeed.bind(\n                                                                        this\n                                                                    )}\n                                                                    xs={9}\n                                                                    handle={this.handle.bind(\n                                                                        this\n                                                                    )}\n                                                                />\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Grid>\n                                                </div>\n                                            </Box>\n                                        </Collapse>\n                                    </Box>\n                                </Draggable>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default Game;\n","import './App.css';\nimport React, { Component } from 'react';\nimport Game from './Game';\n\n\nclass App extends Component{\n\n  render()\n  {\n    return(\n        <div className=\"App\">\n          <Game/>\n        </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}